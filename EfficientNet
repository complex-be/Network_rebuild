import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
import torchvision
import torchvision.transforms as transforms
import numpy as np
import matplotlib.pyplot as plt

class SwishActivation(nn.Module):
    """Swish激活函数"""
    def forward(self, x):
        return x * torch.sigmoid(x)

class SqueezeExcitation(nn.Module):
    """SE注意力机制"""
    def __init__(self, in_channels, reduced_dim):
        super(SqueezeExcitation, self).__init__()
        self.se = nn.Sequential(
            nn.AdaptiveAvgPool2d(1),
            nn.Conv2d(in_channels, reduced_dim, 1),
            SwishActivation(),
            nn.Conv2d(reduced_dim, in_channels, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        return x * self.se(x)

class MBConvBlock(nn.Module):
    """MobileNet卷积块"""
    def __init__(self, in_channels, out_channels, kernel_size, stride, 
                 expand_ratio, se_ratio, drop_rate):
        super(MBConvBlock, self).__init__()
        self.stride = stride
        self.drop_rate = drop_rate
        self.use_residual = (stride == 1 and in_channels == out_channels)
        
        # 扩展阶段
        expanded_channels = in_channels * expand_ratio
        if expand_ratio != 1:
            self.expand = nn.Sequential(
                nn.Conv2d(in_channels, expanded_channels, 1, bias=False),
                nn.BatchNorm2d(expanded_channels),
                SwishActivation()
            )
        else:
            self.expand = nn.Identity()
        
        # 深度卷积
        self.depthwise = nn.Sequential(
            nn.Conv2d(expanded_channels, expanded_channels, kernel_size,
                     stride, padding=kernel_size//2, groups=expanded_channels, bias=False),
            nn.BatchNorm2d(expanded_channels),
            SwishActivation()
        )
        
        # SE注意力
        if se_ratio > 0:
            se_channels = max(1, int(in_channels * se_ratio))
            self.se = SqueezeExcitation(expanded_channels, se_channels)
        else:
            self.se = nn.Identity()
        
        # 输出投影
        self.project = nn.Sequential(
            nn.Conv2d(expanded_channels, out_channels, 1, bias=False),
            nn.BatchNorm2d(out_channels)
        )
        
        self.dropout = nn.Dropout2d(drop_rate) if drop_rate > 0 else nn.Identity()

    def forward(self, x):
        if self.expand is not None:
            out = self.expand(x)
        else:
            out = x
            
        out = self.depthwise(out)
        out = self.se(out)
        out = self.project(out)
        
        if self.use_residual:
            out = self.dropout(out)
            out = out + x
            
        return out

class EfficientNet(nn.Module):
    """EfficientNet网络"""
    def __init__(self, width_mult=1.0, depth_mult=1.0, num_classes=1000, dropout_rate=0.2):
        super(EfficientNet, self).__init__()
        
        # EfficientNet-B0基础配置
        # [expand_ratio, channels, num_layers, stride, kernel_size, se_ratio]
        base_config = [
            [1, 16, 1, 1, 3, 0.25],
            [6, 24, 2, 2, 3, 0.25],
            [6, 40, 2, 2, 5, 0.25],
            [6, 80, 3, 2, 3, 0.25],
            [6, 112, 3, 1, 5, 0.25],
            [6, 192, 4, 2, 5, 0.25],
            [6, 320, 1, 1, 3, 0.25],
        ]
        
        # 初始卷积
        out_channels = int(32 * width_mult)
        self.stem = nn.Sequential(
            nn.Conv2d(3, out_channels, 3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(out_channels),
            SwishActivation()
        )
        
        # MBConv块
        self.blocks = nn.ModuleList([])
        in_channels = out_channels
        
        for expand_ratio, channels, num_layers, stride, kernel_size, se_ratio in base_config:
            out_channels = int(channels * width_mult)
            num_layers = int(num_layers * depth_mult)
            
            for i in range(num_layers):
                self.blocks.append(
                    MBConvBlock(
                        in_channels=in_channels,
                        out_channels=out_channels,
                        kernel_size=kernel_size,
                        stride=stride if i == 0 else 1,
                        expand_ratio=expand_ratio,
                        se_ratio=se_ratio,
                        drop_rate=0.2
                    )
                )
                in_channels = out_channels
        
        # 分类头
        final_channels = int(1280 * width_mult)
        self.head = nn.Sequential(
            nn.Conv2d(in_channels, final_channels, 1, bias=False),
            nn.BatchNorm2d(final_channels),
            SwishActivation(),
            nn.AdaptiveAvgPool2d(1),
            nn.Dropout(dropout_rate),
        )
        self.classifier = nn.Linear(final_channels, num_classes)
        
        self._initialize_weights()

    def _initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out')
                if m.bias is not None:
                    nn.init.zeros_(m.bias)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.ones_(m.weight)
                nn.init.zeros_(m.bias)
            elif isinstance(m, nn.Linear):
                nn.init.normal_(m.weight, 0, 0.01)
                nn.init.zeros_(m.bias)

    def forward(self, x):
        x = self.stem(x)
        
        for block in self.blocks:
            x = block(x)
        
        x = self.head(x)
        x = torch.flatten(x, 1)
        x = self.classifier(x)
        return x
